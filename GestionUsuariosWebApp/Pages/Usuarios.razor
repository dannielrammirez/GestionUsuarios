@page "/usuarios"
@using GestionUsuariosWebApp.Models
@using GestionUsuariosWebApp.Services
@inject UsuarioService UsuarioService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Gestión de Usuarios</h3>

@if (_isLoading)
{
    <p><em>Cargando usuarios...</em></p>
}
else if (_errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        Error: @_errorMessage <button class="btn btn-primary btn-sm" @onclick="LoadUsuarios">Reintentar</button>
    </div>
}
else if (!_usuarios.Any())
{
    <p>No hay usuarios registrados.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Email</th>
                <th>Fecha Creación</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in _usuarios)
            {
                <tr>
                    <td>@usuario.Id</td>
                    <td>@usuario.Nombre</td>
                    <td>@usuario.Email</td>
                    <td>@usuario.FechaCreacion.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => EditUser(usuario)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(usuario.Id ?? 0)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-success mt-3" @onclick="ShowAddUserForm">Añadir Nuevo Usuario</button>

@if (_showForm)
{
    <hr />
    <h4>@( _editingUser?.Id == null ? "Crear Nuevo Usuario" : "Editar Usuario" )</h4>
    <EditForm Model="@_currentUser" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label for="nombre">Nombre:</label>
            <InputText id="nombre" class="form-control" @bind-Value="_currentUser.Nombre" />
        </div>
        <div class="form-group mb-2">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="_currentUser.Email" />
        </div>

        <button type="submit" class="btn btn-primary mt-3">Guardar</button>
        <button type="button" class="btn btn-secondary mt-3 ms-2" @onclick="CancelForm">Cancelar</button>
    </EditForm>
}

@code {
    private List<Usuario> _usuarios = new List<Usuario>();
    private bool _isLoading = true;
    private string? _errorMessage;
    private Usuario _currentUser = new Usuario();
    private Usuario? _editingUser;
    private bool _showForm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsuarios();
    }

    private async Task LoadUsuarios()
    {
        _isLoading = true;
        _errorMessage = null;
        try
        {
            _usuarios = await UsuarioService.GetUsuariosAsync();
        }
        catch (HttpRequestException ex)
        {
            _errorMessage = $"No se pudo conectar con la API. Asegúrate de que la API esté ejecutándose en http://localhost:5000. Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ocurrió un error: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ShowAddUserForm()
    {
        _currentUser = new Usuario();
        _editingUser = null;
        _showForm = true;
    }

    private void EditUser(Usuario userToEdit)
    {
        _currentUser = new Usuario
        {
            Id = userToEdit.Id,
            Nombre = userToEdit.Nombre,
            Email = userToEdit.Email,
            FechaCreacion = userToEdit.FechaCreacion
        };
        _editingUser = userToEdit;
        _showForm = true;
    }

    private async Task HandleValidSubmit()
    {
        _isLoading = true;
        _errorMessage = null;

        try
        {
            if (string.IsNullOrWhiteSpace(_currentUser.Nombre))
            {
                _errorMessage = "El nombre no puede estar vacío.";
                _isLoading = false;
                return;
            }
            if (string.IsNullOrWhiteSpace(_currentUser.Email))
            {
                _errorMessage = "El email no puede estar vacío.";
                _isLoading = false;
                return;
            }

            if (_editingUser == null)
            {
                var newUserForApi = new Usuario
                {
                    Id = 0,
                    Nombre = _currentUser.Nombre,
                    Email = _currentUser.Email
                };

                await UsuarioService.CreateUsuarioAsync(newUserForApi);

                await JSRuntime.InvokeVoidAsync("alert", "Usuario creado con éxito!");
            }
            else
            {
                var updatedUserForApi = new Usuario
                {
                    Id = _currentUser.Id,
                    Nombre = _currentUser.Nombre,
                    Email = _currentUser.Email,
                    FechaCreacion = _currentUser.FechaCreacion
                };

                await UsuarioService.UpdateUsuarioAsync(updatedUserForApi);

                await JSRuntime.InvokeVoidAsync("alert", "Usuario actualizado con éxito!");
            }

            _showForm = false;
            _currentUser = new Usuario(); 
            _editingUser = null;

            await LoadUsuarios();
        }
        catch (HttpRequestException ex)
        {
            _errorMessage = $"No se pudo conectar con la API. Asegúrate de que la API esté ejecutándose en http://localhost:5000/ y la política CORS sea correcta. Error: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", _errorMessage);
        }
        catch (System.Text.Json.JsonException ex)
        {
            _errorMessage = $"Error de formato de datos (JSON): {ex.Message}. Verifica que el modelo de usuario en Blazor y la API coincidan, especialmente mayúsculas/minúsculas y tipos de datos.";
            await JSRuntime.InvokeVoidAsync("alert", _errorMessage);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ocurrió un error inesperado al guardar el usuario: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", _errorMessage);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task DeleteUser(int id)
    {
        if (id == 0) return;

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que quieres eliminar al usuario con ID {id}?");
        if (confirmed)
        {
            _isLoading = true;
            _errorMessage = null;
            try
            {
                await UsuarioService.DeleteUsuarioAsync(id);
                await LoadUsuarios();
            }
            catch (Exception ex)
            {
                _errorMessage = $"Error al eliminar usuario: {ex.Message}";
            }
            finally
            {
                _isLoading = false;
            }
        }
    }

    private void CancelForm()
    {
        _showForm = false;
        _currentUser = new Usuario();
        _editingUser = null;
    }
}